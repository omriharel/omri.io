{"meta":{"exported_on":1496099309682,"version":"004"},"data":{"posts":[{"id":2,"uuid":"40fa5ad5-75fa-415e-a717-004c48fce1c1","title":"Well then.","slug":"intro","markdown":"It appears that I now have a site. And a blog. That's wonderful! Almost as wonderful as poros! ..Okay, I might be a *little* bit off. But it's still pretty nice.\n\nSo now, equipped with my very own [*.io*](http://omri.io) domain name, and an extreme thirst for angryface pun-haters, I embark on a fresh journey of having *absolutely no fucking idea* what I am doing. With lots and lots of [Docker](http://docker.io), as I hear that is quite popular nowadays.\n\n##### Architecture\n\nSetting this stack up was relatively simple, especially for a complete web-moron such as myself. This blog runs on [Ghost](http://ghost.org), an open-source blogging platform running on NodeJS. It's hosted on a [DigitalOcean](https://www.digitalocean.com) Ubuntu server, and runs on top of Docker containers (one per service, so one for this blog and another one with nginx for the main area, currently).\n\nIn addition to that, a main nginx server runs directly on top of the server, and it acts as the gateway to everything. It reverse-proxies requests by their subdomain to their appropriate Docker container's port:\n\n```\nmain_nginx\n    ------> omri.io, www.omri.io -> http://localhost:6000\n    ------> blog.omri.io -> http://localhost:6001\n```\n\nIn order to keep the docker containers volatile and non-important, their relevant data directories are volumes originating from the server's filesystem.\n\nKeep in mind: doing this isn't enough on its own and you'll also need to create A-records in your domain's DNS settings, for every subdomain that you wish to reach your server.\n\nShould I decide to write any real code and *actually* do something with this virtual space, it'll be made available in my [GitHub repository](http://github.com/omriharel/omri.io) that I opened for this project.\n\n##### Conclusion\n\nBut for now, hello there! And thanks for checking me out, blogboys. I, for one, am excited and also a bit disappointed that we made it so far without any puns. It's only fun if they pun.","html":"<p>It appears that I now have a site. And a blog. That's wonderful! Almost as wonderful as poros! ..Okay, I might be a <em>little</em> bit off. But it's still pretty nice.</p>\n\n<p>So now, equipped with my very own <a href=\"http://omri.io\"><em>.io</em></a> domain name, and an extreme thirst for angryface pun-haters, I embark on a fresh journey of having <em>absolutely no fucking idea</em> what I am doing. With lots and lots of <a href=\"http://docker.io\">Docker</a>, as I hear that is quite popular nowadays.</p>\n\n<h5 id=\"architecture\">Architecture</h5>\n\n<p>Setting this stack up was relatively simple, especially for a complete web-moron such as myself. This blog runs on <a href=\"http://ghost.org\">Ghost</a>, an open-source blogging platform running on NodeJS. It's hosted on a <a href=\"https://www.digitalocean.com\">DigitalOcean</a> Ubuntu server, and runs on top of Docker containers (one per service, so one for this blog and another one with nginx for the main area, currently).</p>\n\n<p>In addition to that, a main nginx server runs directly on top of the server, and it acts as the gateway to everything. It reverse-proxies requests by their subdomain to their appropriate Docker container's port:</p>\n\n<pre><code>main_nginx  \n    ------&gt; omri.io, www.omri.io -&gt; http://localhost:6000\n    ------&gt; blog.omri.io -&gt; http://localhost:6001\n</code></pre>\n\n<p>In order to keep the docker containers volatile and non-important, their relevant data directories are volumes originating from the server's filesystem.</p>\n\n<p>Keep in mind: doing this isn't enough on its own and you'll also need to create A-records in your domain's DNS settings, for every subdomain that you wish to reach your server.</p>\n\n<p>Should I decide to write any real code and <em>actually</em> do something with this virtual space, it'll be made available in my <a href=\"http://github.com/omriharel/omri.io\">GitHub repository</a> that I opened for this project.</p>\n\n<h5 id=\"conclusion\">Conclusion</h5>\n\n<p>But for now, hello there! And thanks for checking me out, blogboys. I, for one, am excited and also a bit disappointed that we made it so far without any puns. It's only fun if they pun.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1450979025185,"created_by":1,"updated_at":1450981411859,"updated_by":1,"published_at":1450981411863,"published_by":1},{"id":3,"uuid":"13b3b390-b630-4a41-aabf-dba33458075c","title":"Docker Acquires Itself in Industry-Breaking Merger, to Build Corporate HQ in the Cloud","slug":"docker-merger","markdown":"Docker has successfully completed an acquisition of itself, valued at $92B, Docker CEO Timothy Cachinglayers disclosed to The Onion Router earlier today. This acquisition, which Cachinglayers assures us is an industry first, takes Docker's Linux container technology a step further by applying copy-on-write principles to the company's monetary and physical assets, effectively doubling its size, revenue and user base. When asked how he expects to deal with this merger's inevitable scale challenges, Cachinglayers stared at me blankly for several seconds and then responded:\n\n> \"Docker's vision has always been scalability, scalability and scalability. We are going to build a new headquarters up in the Cloud, we truly believe that's where our innovation will be the most secure and we've always been about security, security, security.\"\n\n**What's in the future for Docker?**\n\"Well, obviously we're going to do a bunch of Dockers, that *is* the company's name and we're really all about that at the end of the day. But we're committed to bring new cutting-edge technologies to everyone, and today I'm excited to announce our very own integrated Big Data containers - Bonkers. You can think of Bonkers as your Dockers in the Cloud with Big Data. We're bringing everything to an intuitive UI - you name it, we support it. There's Hadoop, Cassandra and even good ol' MySQL. And yes - we can scale your cluster\", and with a very suggestive gawk he added, \"and we will.\"","html":"<p>Docker has successfully completed an acquisition of itself, valued at $92B, Docker CEO Timothy Cachinglayers disclosed to The Onion Router earlier today. This acquisition, which Cachinglayers assures us is an industry first, takes Docker's Linux container technology a step further by applying copy-on-write principles to the company's monetary and physical assets, effectively doubling its size, revenue and user base. When asked how he expects to deal with this merger's inevitable scale challenges, Cachinglayers stared at me blankly for several seconds and then responded:</p>\n\n<blockquote>\n  <p>\"Docker's vision has always been scalability, scalability and scalability. We are going to build a new headquarters up in the Cloud, we truly believe that's where our innovation will be the most secure and we've always been about security, security, security.\"</p>\n</blockquote>\n\n<p><strong>What's in the future for Docker?</strong>\n\"Well, obviously we're going to do a bunch of Dockers, that <em>is</em> the company's name and we're really all about that at the end of the day. But we're committed to bring new cutting-edge technologies to everyone, and today I'm excited to announce our very own integrated Big Data containers - Bonkers. You can think of Bonkers as your Dockers in the Cloud with Big Data. We're bringing everything to an intuitive UI - you name it, we support it. There's Hadoop, Cassandra and even good ol' MySQL. And yes - we can scale your cluster\", and with a very suggestive gawk he added, \"and we will.\"</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1455784523816,"created_by":1,"updated_at":1455787841001,"updated_by":1,"published_at":1455787806927,"published_by":1},{"id":4,"uuid":"f6edb9f1-c51d-47a6-898c-82837c90893b","title":"golang: The Sneaky range Pointer","slug":"golang-sneaky-range-pointer","markdown":"I want to write about an unintuitive phenomenon I encountered today while debugging my code. It has to do with the way memory allocation happens when you `range` over an array of structs in golang.\n\nSay you have a Deer struct:\n\n```\ntype Deer struct {\n    Hooves []Hoof\n}\n```\n\nDeer have four hooves, so the above representation seems faithful in terms of memory allocation - hooves belong in the deer, they're a part of it.\n\nNow let's consider the case where we'd like to determine whether the deer is currently hopping. We define a hop as any point in time where the deer has two or more hooves in the air.\n\nFor the sake of my example, instead of simply counting how many hooves are mid-air, I will want to do more things with those hooves later, so I want to take that subset into a separate array. Since memory has already been allocated previously for the Hooves (when the Deer was adorably constructed), I would prefer to not allocate it again, meaning I will use an array of Hoof pointers: `[]*Hoof`\n\nHere's what this code would look like:\n```\nfunc (deer *Deer) GetMidAirHooves() []*Hoof {\n    midAirHooves := []*Hoof{}\n\n    for _, hoof := range deer.Hooves {\n        if hoof.MidAir() {\n\n            // append the hoof's address\n            midAirHooves = append(midAirHooves, &hoof)\n        }\n    }\n\n    return midAirHooves\n}\n```\n\nThis is where it may get confusing: when you `range` over an array of structs, and then reference the current struct's address (`&hoof` in our example), you're referencing the _address of the memory allocated for the iteration itself_. This memory has the iterated structs copied into it one after the other, and once the iteration ends, any reference to it will only give you the *last* struct in the array. The de-facto result is that `midAirHooves` will contain as many pointers as there are hooves in the air, all of them pointing to the fourth hoof.\n\nThe implications is that if you still want to produce a pointer array from a struct array, you'll need to use the index to correctly point to the struct. In our case the loop would look as such:\n```\n    for i, hoof := range deer.Hooves {\n        if hoof.MidAir() {\n\n            // append the real hoof's address\n            midAirHooves = append(midAirHooves, &(deer.Hooves[i]))\n        }\n    }\n```\n\nWatch out for this tricky behavior when writing your code!","html":"<p>I want to write about an unintuitive phenomenon I encountered today while debugging my code. It has to do with the way memory allocation happens when you <code>range</code> over an array of structs in golang.</p>\n\n<p>Say you have a Deer struct:</p>\n\n<pre><code>type Deer struct {  \n    Hooves []Hoof\n}\n</code></pre>\n\n<p>Deer have four hooves, so the above representation seems faithful in terms of memory allocation - hooves belong in the deer, they're a part of it.</p>\n\n<p>Now let's consider the case where we'd like to determine whether the deer is currently hopping. We define a hop as any point in time where the deer has two or more hooves in the air.</p>\n\n<p>For the sake of my example, instead of simply counting how many hooves are mid-air, I will want to do more things with those hooves later, so I want to take that subset into a separate array. Since memory has already been allocated previously for the Hooves (when the Deer was adorably constructed), I would prefer to not allocate it again, meaning I will use an array of Hoof pointers: <code>[]*Hoof</code></p>\n\n<p>Here's what this code would look like:  </p>\n\n<pre><code>func (deer *Deer) GetMidAirHooves() []*Hoof {  \n    midAirHooves := []*Hoof{}\n\n    for _, hoof := range deer.Hooves {\n        if hoof.MidAir() {\n\n            // append the hoof's address\n            midAirHooves = append(midAirHooves, &amp;hoof)\n        }\n    }\n\n    return midAirHooves\n}\n</code></pre>\n\n<p>This is where it may get confusing: when you <code>range</code> over an array of structs, and then reference the current struct's address (<code>&amp;hoof</code> in our example), you're referencing the <em>address of the memory allocated for the iteration itself</em>. This memory has the iterated structs copied into it one after the other, and once the iteration ends, any reference to it will only give you the <em>last</em> struct in the array. The de-facto result is that <code>midAirHooves</code> will contain as many pointers as there are hooves in the air, all of them pointing to the fourth hoof.</p>\n\n<p>The implications is that if you still want to produce a pointer array from a struct array, you'll need to use the index to correctly point to the struct. In our case the loop would look as such:  </p>\n\n<pre><code>    for i, hoof := range deer.Hooves {\n        if hoof.MidAir() {\n\n            // append the real hoof's address\n            midAirHooves = append(midAirHooves, &amp;(deer.Hooves[i]))\n        }\n    }\n</code></pre>\n\n<p>Watch out for this tricky behavior when writing your code!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1479214492176,"created_by":1,"updated_at":1484828768613,"updated_by":1,"published_at":1484826540000,"published_by":1}],"users":[{"id":1,"uuid":"c819cb71-af5a-4a91-92b0-ba34c9a415ac","name":"Omri Harel","slug":"omri","password":"$2a$10$Q39izIX69GLwoU1b2ZXh3.9Kc0Ck6HOmfTrgev00hqRvQyP7CTfQO","email":"omri.harel.en@gmail.com","image":null,"cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"tour":null,"last_login":1484826455662,"created_at":1450973605651,"created_by":1,"updated_at":1484826494901,"updated_by":1}],"roles":[{"id":1,"uuid":"ace29e5a-ceff-4367-9b4b-3865a0a88aea","name":"Administrator","description":"Administrators","created_at":1450973603785,"created_by":1,"updated_at":1450973603785,"updated_by":1},{"id":2,"uuid":"2254249f-1101-4e79-af2f-ec0a21e5f85a","name":"Editor","description":"Editors","created_at":1450973603785,"created_by":1,"updated_at":1450973603785,"updated_by":1},{"id":3,"uuid":"4aa591e9-9aec-441b-a708-5af6b7e7307e","name":"Author","description":"Authors","created_at":1450973603786,"created_by":1,"updated_at":1450973603786,"updated_by":1},{"id":4,"uuid":"ccfe669c-61c4-4b3a-84ab-c154eb070941","name":"Owner","description":"Blog Owner","created_at":1450973603786,"created_by":1,"updated_at":1450973603786,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":1,"uuid":"b496ce82-9619-408a-8933-9cdba0412f2b","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1450973603899,"created_by":1,"updated_at":1450973603899,"updated_by":1},{"id":2,"uuid":"b2079da4-076d-47b5-b6ac-abe2a63f5d59","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1450973603905,"created_by":1,"updated_at":1450973603905,"updated_by":1},{"id":3,"uuid":"3bdc5212-1aa8-4263-a50e-4655c14a8ae3","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1450973603911,"created_by":1,"updated_at":1450973603911,"updated_by":1},{"id":4,"uuid":"9041c198-3b0e-47a7-af2b-08104e2e8741","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1450973603922,"created_by":1,"updated_at":1450973603922,"updated_by":1},{"id":5,"uuid":"5af66b16-08c5-41f6-bfdb-9800fccbfe14","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1450973603965,"created_by":1,"updated_at":1450973603965,"updated_by":1},{"id":6,"uuid":"09e64e79-c2dc-4a79-952d-2b7b65e4d8cf","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1450973603984,"created_by":1,"updated_at":1450973603984,"updated_by":1},{"id":7,"uuid":"ff96b280-6ddf-4a31-a248-74f6bb8281ab","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1450973603996,"created_by":1,"updated_at":1450973603996,"updated_by":1},{"id":8,"uuid":"d0f73b3b-0eee-49c4-880f-29f91265af7b","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1450973604011,"created_by":1,"updated_at":1450973604011,"updated_by":1},{"id":9,"uuid":"259dbe43-307d-4b31-95b1-1d2c7bd220f0","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1450973604023,"created_by":1,"updated_at":1450973604023,"updated_by":1},{"id":10,"uuid":"7be8e2f9-2e01-4b6d-83df-39efe528867e","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1450973604033,"created_by":1,"updated_at":1450973604033,"updated_by":1},{"id":11,"uuid":"ba136443-5cce-476f-9c6e-0c84a4ace823","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1450973604044,"created_by":1,"updated_at":1450973604044,"updated_by":1},{"id":12,"uuid":"cd4d0402-789a-49ff-9b07-4baa36718bf4","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1450973604057,"created_by":1,"updated_at":1450973604057,"updated_by":1},{"id":13,"uuid":"28d39344-445b-41ec-8126-6b91e55906ff","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1450973604073,"created_by":1,"updated_at":1450973604073,"updated_by":1},{"id":14,"uuid":"5dc49560-da0c-4f84-af54-c4c087fe9590","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1450973604087,"created_by":1,"updated_at":1450973604087,"updated_by":1},{"id":15,"uuid":"db840e13-673d-4b2b-b16a-7858bc409cdf","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1450973604099,"created_by":1,"updated_at":1450973604099,"updated_by":1},{"id":16,"uuid":"03895ed5-bf06-489f-a181-6360d7be88a8","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1450973604112,"created_by":1,"updated_at":1450973604112,"updated_by":1},{"id":17,"uuid":"4e7ff4b4-a582-45a7-bdad-8e88f7c104af","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1450973604120,"created_by":1,"updated_at":1450973604120,"updated_by":1},{"id":18,"uuid":"2ce04971-761f-44d3-9bc5-e21992684d25","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1450973604130,"created_by":1,"updated_at":1450973604130,"updated_by":1},{"id":19,"uuid":"7e73351c-ab79-49a7-8958-a043938ab4fc","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1450973604139,"created_by":1,"updated_at":1450973604139,"updated_by":1},{"id":20,"uuid":"18b8f2df-0350-41ab-94e9-0a3556067bb5","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1450973604152,"created_by":1,"updated_at":1450973604152,"updated_by":1},{"id":21,"uuid":"c17c71ab-bcbe-4bc2-bb41-04620b77396b","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1450973604166,"created_by":1,"updated_at":1450973604166,"updated_by":1},{"id":22,"uuid":"732875c3-528a-4517-b3f2-6c4a316ff288","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1450973604175,"created_by":1,"updated_at":1450973604175,"updated_by":1},{"id":23,"uuid":"ddb37518-5e54-43a5-84e0-24c73b511f97","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1450973604188,"created_by":1,"updated_at":1450973604188,"updated_by":1},{"id":24,"uuid":"91ff1ba0-4b90-4d57-adee-62ef9aa017c0","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1450973604199,"created_by":1,"updated_at":1450973604199,"updated_by":1},{"id":25,"uuid":"f105bd15-725a-4f3a-9c3c-6d12819acfc8","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1450973604208,"created_by":1,"updated_at":1450973604208,"updated_by":1},{"id":26,"uuid":"d11003e8-e1cc-48ba-85a1-44965f9d895c","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1450973604220,"created_by":1,"updated_at":1450973604220,"updated_by":1},{"id":27,"uuid":"38573562-be9e-4bca-a12d-5e22156c07b0","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1450973604230,"created_by":1,"updated_at":1450973604230,"updated_by":1},{"id":28,"uuid":"123e7696-5ad2-411b-ad09-93d7ded8a0da","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1450973604241,"created_by":1,"updated_at":1450973604241,"updated_by":1},{"id":29,"uuid":"a7d80eec-d446-497e-abc7-8fac97082762","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1450973604308,"created_by":1,"updated_at":1450973604308,"updated_by":1},{"id":30,"uuid":"49e63b06-c988-4bea-98ac-d096417dd9ed","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1450973604329,"created_by":1,"updated_at":1450973604329,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30}],"permissions_apps":[],"settings":[{"id":1,"uuid":"e70987bd-b45c-4989-aa4b-628ec5c2e51f","key":"databaseVersion","value":"004","type":"core","created_at":1450973605713,"created_by":1,"updated_at":1450973605713,"updated_by":1},{"id":2,"uuid":"57dd9279-8d26-4231-b19c-4ef358ea22ed","key":"dbHash","value":"b77db22f-4aae-4350-8463-09ac35591178","type":"core","created_at":1450973605714,"created_by":1,"updated_at":1450973606053,"updated_by":1},{"id":3,"uuid":"7bf68b73-a4cc-47e8-8eba-ebc36ebd11b1","key":"nextUpdateCheck","value":"1484912461","type":"core","created_at":1450973605715,"created_by":1,"updated_at":1484826061112,"updated_by":1},{"id":4,"uuid":"36fb34f1-01d4-4e0d-9e12-60b2e6c5d7e8","key":"displayUpdateNotification","value":"0.11.4","type":"core","created_at":1450973605715,"created_by":1,"updated_at":1484826061120,"updated_by":1},{"id":5,"uuid":"8e957407-e0a6-472b-bdc6-4f0927fd06a6","key":"title","value":"blog.omri.io","type":"blog","created_at":1450973605717,"created_by":1,"updated_at":1451903126843,"updated_by":1},{"id":6,"uuid":"d23423fd-f058-4684-bc98-d80fc7625303","key":"description","value":"Musings from the mind of a young gentleman.","type":"blog","created_at":1450973605718,"created_by":1,"updated_at":1451903126849,"updated_by":1},{"id":7,"uuid":"7fc90624-cf4c-4e1f-9162-0d06cd284030","key":"logo","value":"","type":"blog","created_at":1450973605718,"created_by":1,"updated_at":1451903126852,"updated_by":1},{"id":8,"uuid":"af432a3d-cb49-42d1-b19a-0f6ef911089e","key":"cover","value":"/content/images/2016/01/mountains-1031677_1920.jpg","type":"blog","created_at":1450973605720,"created_by":1,"updated_at":1451903126855,"updated_by":1},{"id":9,"uuid":"40c6b735-635a-4c4a-b032-cf8eede2550b","key":"defaultLang","value":"en_US","type":"blog","created_at":1450973605722,"created_by":1,"updated_at":1451903126858,"updated_by":1},{"id":10,"uuid":"a87fd043-ea5b-4e06-bd9a-cc509e157181","key":"postsPerPage","value":"5","type":"blog","created_at":1450973605723,"created_by":1,"updated_at":1451903126861,"updated_by":1},{"id":11,"uuid":"3c15c89a-ce81-4c55-b829-bd3471cbbf6e","key":"forceI18n","value":"true","type":"blog","created_at":1450973605723,"created_by":1,"updated_at":1451903126864,"updated_by":1},{"id":12,"uuid":"bd1894de-48e8-4f3a-bcd3-ae49e300bd4c","key":"permalinks","value":"/:slug/","type":"blog","created_at":1450973605724,"created_by":1,"updated_at":1451903126867,"updated_by":1},{"id":13,"uuid":"68847bbb-28cf-4645-98c2-4887b3902fe4","key":"ghost_head","value":"","type":"blog","created_at":1450973605724,"created_by":1,"updated_at":1451903126872,"updated_by":1},{"id":14,"uuid":"e876690b-c896-45db-9b9b-891d21235d63","key":"ghost_foot","value":"","type":"blog","created_at":1450973605725,"created_by":1,"updated_at":1451903126876,"updated_by":1},{"id":15,"uuid":"08501628-1967-4a58-a686-d36dfeb917fb","key":"labs","value":"{}","type":"blog","created_at":1450973605725,"created_by":1,"updated_at":1451903126879,"updated_by":1},{"id":16,"uuid":"fe74184c-1945-4487-80a9-e7993a928170","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"Main site\",\"url\":\"http://omri.io\"}]","type":"blog","created_at":1450973605726,"created_by":1,"updated_at":1451903126881,"updated_by":1},{"id":17,"uuid":"3db62cf0-321e-4a3d-8fe9-9fa16f3237fd","key":"activeApps","value":"[]","type":"app","created_at":1450973605727,"created_by":1,"updated_at":1450973605727,"updated_by":1},{"id":18,"uuid":"23a31804-ceb5-4a97-84cd-8caab2f1f7b9","key":"installedApps","value":"[]","type":"app","created_at":"2015-12-24 16:13:25","created_by":1,"updated_at":"2017-05-29 23:08:29","updated_by":1},{"id":19,"uuid":"f0b50da1-c727-4ff4-81a7-60901940958c","key":"isPrivate","value":"false","type":"private","created_at":1450973605728,"created_by":1,"updated_at":1451903126884,"updated_by":1},{"id":20,"uuid":"9ab8be4d-527b-4182-841c-313af551e88a","key":"password","value":"","type":"private","created_at":1450973605728,"created_by":1,"updated_at":1451903126887,"updated_by":1},{"id":21,"uuid":"43f9c5c7-f73e-49d3-ab4f-b3f8e81a2009","key":"activeTheme","value":"casper","type":"theme","created_at":1450973605726,"created_by":1,"updated_at":1451903126870,"updated_by":1},{"id":22,"uuid":"48f01af7-9524-440a-956e-f9c01286954a","key":"seenNotifications","value":"[]","type":"core","created_at":"2017-05-29 23:08:28","created_by":1,"updated_at":"2017-05-29 23:08:28","updated_by":1},{"id":23,"uuid":"6e442033-800a-4add-b7c8-6869d7488066","key":"migrations","value":"{}","type":"core","created_at":"2017-05-29 23:08:28","created_by":1,"updated_at":"2017-05-29 23:08:28","updated_by":1},{"id":24,"uuid":"3a1833bc-b3e5-4925-9e0d-59700bcde8a8","key":"activeTimezone","value":"Etc/UTC","type":"blog","created_at":"2017-05-29 23:08:28","created_by":1,"updated_at":"2017-05-29 23:08:28","updated_by":1},{"id":25,"uuid":"af45dc17-7e27-43d2-b993-611772fc81f4","key":"amp","value":"true","type":"blog","created_at":"2017-05-29 23:08:28","created_by":1,"updated_at":"2017-05-29 23:08:28","updated_by":1},{"id":26,"uuid":"750ad636-81c8-4130-bef2-9f237fde76f0","key":"facebook","value":"","type":"blog","created_at":"2017-05-29 23:08:28","created_by":1,"updated_at":"2017-05-29 23:08:28","updated_by":1},{"id":27,"uuid":"af557fd3-e52a-423f-b371-953fc25f9988","key":"twitter","value":"","type":"blog","created_at":"2017-05-29 23:08:28","created_by":1,"updated_at":"2017-05-29 23:08:28","updated_by":1},{"id":28,"uuid":"4372e2d2-f7a5-4325-8863-18bf188b1d7b","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2017-05-29 23:08:28","created_by":1,"updated_at":"2017-05-29 23:08:28","updated_by":1}],"tags":[{"id":2,"uuid":"4338405e-4edf-4022-ba96-2e5641f05ca5","name":"golang","slug":"golang","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1484828768655,"created_by":1,"updated_at":1484828768655,"updated_by":1}],"posts_tags":[{"id":2,"post_id":4,"tag_id":2,"sort_order":0}],"apps":[],"app_settings":[],"app_fields":[]}}